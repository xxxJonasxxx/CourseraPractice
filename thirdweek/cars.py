#!/usr/bin/env python3

import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0} #Max. Sales
  max_sales_year = {"salesperyear": 0} #Max. Sale per Year
  sales_year = {} #Sales Dictionary



  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    item_sales = item["total_sales"] #

    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # Calculate the max # of sales
    if item_sales > max_sales["sales"]:
      item["sales"] = item_sales
      max_sales = item

    # Calculate the # sales per year
    if item["car"]["car_year"] in sales_year:
      sales_year[item["car"]["car_year"]] = sales_year.get(item["car"]["car_year"]) + item_sales
    else:
      sales_year[item["car"]["car_year"]] = item_sales

  # Calculate the best year
  for year, value in sales_year.items():
    if value > max_sales_year["salesperyear"]:
      max_sales_year["year"] = year
      max_sales_year["salesperyear"] = value


  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["sales"]),
    "The most popular year was {} with {} sales.".format(max_sales_year["year"], max_sales_year["salesperyear"])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""

  data = load_data("cars_sales.json")
  summary = process_data(data)
  print(summary)


  # TODO: turn this into a PDF report
  #List to a text variable - To PDF
  summtext = ''
  for line in summary:
    summtext = summtext + line + "<br/>"

  reports.generate("/tmp/cars.pdf","Sales summary for last month",summtext,cars_dict_to_table(data))
  
  
  #List to a text variable - To email
  # TODO: send the PDF report as an email attachment  
  summtextemail = ''
  for line in summary:
    summtextemail = summtextemail + line + "\n"


  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = summtextemail

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)
  

if __name__ == "__main__":
  main(sys.argv)
  
